dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
cat("Surface Water")
# call in spatial object at give extent
geometry <- setSpatialData(processingLevel = processingLevel)
### EJScreen and ACS data contributes to multiple components run it here then split out
ejscreen <- ej_screen(filePath = "data/input/EJScreen/EJSCREEN_2021_StatePctile.csv",
geometry = geometry,
processingLevel = processingLevel,
version = version,
overwrite = overwrite)
### add condition to test for the existence of a specific file based on geom
acsData <- acs(processingLevel = processingLevel,
version = version,
overwrite = overwrite)
# run functions
cat("EJscreen")
d1 <- ejscreen %>%
dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
cat("Surface Water")
d2 <- getSurfaceWater(filePath = "data/input/surfaceWater/Streams303dLayerFinal.shp",
processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
cat("Mining")
d3 <- getmines(geometry,
processingLevel,
version = version,
overwrite = overwrite)
cat("Oil and Gas")
d4 <- getProxyOilGas(geometry = geometry,
processingLevel = processingLevel,
version = version,
overwrite = overwrite)
# combine datasets
dataframes <- list(d1,d2,d3,d4)
df <- joinDataFrames(dataframes)
View(df)
# run functions
cat("EJscreen")
d1 <- ejscreen %>%
dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
cat("Surface Water")
d2 <- getSurfaceWater(filePath = "data/input/surfaceWater/Streams303dLayerFinal.shp",
processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
d1
d2
d2 <- getSurfaceWater(filePath = "data/input/surfaceWater/Streams303dLayerFinal.shp",
processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
d2
d1 <- ejscreen %>%
dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
###
# general workflow structure
###
# download data processing code base
# download data from https://github.com/GeospatialCentroid/Colorado_EnviroScreen_Data
#
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# copy content from the data repo into the "data/input file folder
# you will be rewriting over the existing folder structure.
# pull geometry layers
getGeometryLayers()
#set version
version <- 1.1
# set census API key
# tidycensus::census_api_key(key = "your key")
# process data  -----------------------------------------------------------
## run single or multiple geometries
geoms <- c("county","censusTract","censusBlockGroup")
(processingLevel=geoms[1]
processingLevel=geoms[1]
processingLevel=geoms[1]
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = TRUE)
###
# general workflow structure
###
# download data processing code base
# download data from https://github.com/GeospatialCentroid/Colorado_EnviroScreen_Data
#
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# copy content from the data repo into the "data/input file folder
# you will be rewriting over the existing folder structure.
# pull geometry layers
getGeometryLayers()
#set version
version <- 1.1
# set census API key
# tidycensus::census_api_key(key = "your key")
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = FALSE)
# process data  -----------------------------------------------------------
## run single or multiple geometries
geoms <- c("county","censusTract","censusBlockGroup")
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = FALSE)
# grab total population from ACS data
acsData <- list.files(path = paste0("data/output/acs/",version), pattern = ".csv", full.names = TRUE)%>%
purrr::map(read_csv)%>%
purrr::reduce(rbind)%>%
dplyr::select("GEOID","Total Population"= "total_Population")
acsData
# read in spatial data
county <- sf::st_read("data/spatialLayers/county/coloradoCounties.geojson")%>%
dplyr::mutate(area = "County",
areaSpanish = "Condado",
name = paste0(NAME, " County"))%>%
dplyr::select(GEOID, "cNAME" = NAME,name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# read in spatial data
county <- sf::st_read("data/spatialLayers/county/coloradoCounties.geojson")%>%
dplyr::mutate(area = "County",
areaSpanish = "Condado",
name = paste0(NAME, " County"))%>%
dplyr::select(GEOID, "cNAME" = NAME,name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# read in spatial data
county <- sf::st_read("data/output/spatialLayers/county/coloradoCounties.geojson")%>%
dplyr::mutate(area = "County",
areaSpanish = "Condado",
name = paste0(NAME, " County"))%>%
dplyr::select(GEOID, "cNAME" = NAME,name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# census tract
censusTract <- sf::st_read("data/output/spatialLayers/censusTract/coloradoCensusTracts.geojson")%>%
dplyr::mutate(area = "Census Tract",
areaSpanish = "Sector censal",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0(cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# census tract
censusTract <- sf::st_read("data/output/spatialLayers/censusTracta/coloradoCensusTracts.geojson")%>%
dplyr::mutate(area = "Census Tract",
areaSpanish = "Sector censal",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0(cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# census tract
censusTract <- sf::st_read("data/output/spatialLayers/censusTracts/coloradoCensusTracts.geojson")%>%
dplyr::mutate(area = "Census Tract",
areaSpanish = "Sector censal",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0(cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# read in spatial data
county <- sf::st_read("data/output/spatialLayers/county/coloradoCounties.geojson")%>%
dplyr::mutate(area = "County",
areaSpanish = "Condado",
name = paste0(NAME, " County"))%>%
dplyr::select(GEOID, "cNAME" = NAME,name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# grap county name to attached to each lower geometry
countyName <- county %>% st_drop_geometry() %>% dplyr::select(GEOID, cNAME)
county <- dplyr::select(county, -"cNAME")
county
# census tract
censusTract <- sf::st_read("data/output/spatialLayers/censusTracts/coloradoCensusTracts.geojson")%>%
dplyr::mutate(area = "Census Tract",
areaSpanish = "Sector censal",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0(cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# census block group
censusBlockGroup <- sf::st_read("data/output/spatialLayers/censusBlockGroups/coloradoCensusBlockGroups.geojson")%>%
dplyr::mutate(area = "Census Block Group",
areaSpanish = "Grupo de bloques censales",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0( cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# read in enviroscreen score files
c_data <- read_csv(paste0("data/output/envScreenScores/county_",version,".csv"))%>%
dplyr::left_join(county, by = "GEOID")
# read in enviroscreen score files
c_data <- read_csv(paste0("data/output/enviroscreenScore/county_",version,".csv"))%>%
dplyr::left_join(county, by = "GEOID")
c_data
# add label for Coal, oil/gas, rural, justice 40, and di community -------------------------------------
coal <- readRDS("data/shinyContent/coalCommunities.rds")%>%
dplyr::select("GEOID","Coal Community" = "coal")%>%
st_drop_geometry()
# add label for Coal, oil/gas, rural, justice 40, and di community -------------------------------------
coal <- readRDS("data/shinyContent/coalVis.rds")%>%
dplyr::select("GEOID","Coal Community" = "coal")%>%
st_drop_geometry()
coal
loadFunctions()
# rural communities
getRural()
# coal communities
getCoal()
# oil and gas communities
getOilGas()
# add label for Coal, oil/gas, rural, justice 40, and di community -------------------------------------
coal <- readRDS("data/shinyContent/coalCommunity.rds")%>%
dplyr::select("GEOID","Coal Community" = "coal")%>%
st_drop_geometry()
og <- readRDS("data/shinyContent/oilgasCommunity.rds")%>%
dplyr::select("GEOID","Oil and Gas Community" = "oilGas")%>%
st_drop_geometry()
rural <- readRDS("data/shinyContent/ruralCommunity.rds")%>%
dplyr::select("GEOID","Rural" = "rural")%>%
st_drop_geometry()
justice40 <- readRDS("data/shinyContent/justice40.rds") %>%
dplyr::select("GEOID","Justice40" = "Identified.as.disadvantaged")%>%
st_drop_geometry()
diCommunity <- readRDS("data/shinyContent/diCommunities.rds")%>%
dplyr::select("GEOID","Disproportionately Impacted Community" = "DI_community")%>%
dplyr::mutate("Disproportionately Impacted Community" = case_when(
`Disproportionately Impacted Community` == 1 ~ TRUE
)
)%>%
st_drop_geometry()
###
# general workflow structure
###
# download data processing code base
# download data from https://github.com/GeospatialCentroid/Colorado_EnviroScreen_Data
#
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# copy content from the data repo into the "data/input file folder
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('IRkernel'
)
install.packages("IRkernel")
IRkernel::installspec()
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
install.packages("geojsonio")
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# process data  -----------------------------------------------------------
## run single or multiple geometries
geoms <- c("county","censusTract","censusBlockGroup")
library(tigris)
library(tidycensus)
library(dplyr)
library(sf)
library(stringr)
library(tictoc)
library(vroom)
library(terra)
library(arcpullr)
library(purrr)
library(tidyr)
library(readr)
library(lubridata)
library(lubridate)
library(rmapshaper)
install.packages("rmapshaper")
install.packages("remotes")
library(remotes)
install_github("ateucher/rmapshaper")
install.packages("geojsonio")
install.packages("jqr")
install.packages("jqr")
install.packages("rmapshaper")
install.packages("rmapshaper")
install.packages("rmapshaper")
library(rmapshaper)
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# pull geometry layers
getGeometryLayers()
#set version
version <- 2
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = FALSE,
version = version,
spanish = TRUE,
overwrite = FALSE)
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = FALSE,
version = version,
spanish = FALSE,
overwrite = FALSE)
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = FALSE,
version = version,
spanish = FALSE,
overwrite = TRUE)
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# pull geometry layers
getGeometryLayers()
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = FALSE,
version = version,
spanish = FALSE,
overwrite = TRUE)
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = FALSE,
version = version,
spanish = TRUE,
overwrite = TRUE)
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# pull geometry layers
getGeometryLayers()
#set version
version <- 2
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = FALSE,
version = version,
spanish = TRUE,
overwrite = FALSE)
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = FALSE,
version = version,
spanish = FALSE,
overwrite = FALSE)
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
#set version
version <- 2
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = TRUE,
version = version,
spanish = TRUE,
overwrite = FALSE)
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# pull geometry layers
getGeometryLayers()
#set version
version <- 2
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = FALSE,
version = version,
spanish = TRUE,
overwrite = FALSE)
-------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# copy content from the data repo into the "data/input file folder
# you will be rewriting over the existing folder structure.
# pull geometry layers
getGeometryLayers()
#set version
version <- 2
filePath <- "data/input/spatialLayers/justice40/1.0-communities.csv"
getJustice40(filePath,
removeNativeLand = TRUE,
overwrite = TRUE)
rlang::last_error()
filePath <- "data/input/spatialLayers/justice40/1.0-communities.csv"
getJustice40(filePath,
removeNativeLand = TRUE,
overwrite = TRUE)
loadFunctions()
getJustice40(filePath,
removeNativeLand = TRUE,
overwrite = TRUE)
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = TRUE,
version = version,
spanish = FALSE,
overwrite = TRUE)
rlang::last_error()
justice40 <- readRDS("data/shinyContent/justice40.rds") %>%
dplyr::select("GEOID","Justice40" = "Identified.as.disadvantaged")%>%
st_drop_geometry()
loadFunctions()
# create the file folder structure
createFolderStructure()
# pull geometry layers
getGeometryLayers()
#set version
version <- 2
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = TRUE,
version = version,
spanish = FALSE,
overwrite = TRUE)
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = TRUE,
version = version,
spanish = FALSE,
overwrite = FALSE)
allScores_2 <- readRDS("C:/Users/mahorton/Documents/COEnviroScreen_dataProcessing/data/shinyContent/allScores_2.rds")
allScores_2_OLD <- readRDS("C:/Users/mahorton/Documents/COEnviroScreen_dataProcessing/data/shinyContent/allScores_2_OLD.rds")
View(allScores_2)
View(allScores_2_OLD)
table(allScores_2$Justice40)
table(allScores_2_OLD$Justice40)
table(allScores_2_OLD$Justice40, allScores_2_OLD$area)
table(allScores_2$Justice40, allScores_2$area)
# shiny Elements ------------------------------------------------
shinyData(removeNativeLand = TRUE,
removeZeroPop = TRUE,
version = version,
spanish = TRUE,
overwrite = FALSE)
allScores_2_spanish <- readRDS("C:/Users/mahorton/Documents/COEnviroScreen_dataProcessing/data/shinyContent/allScores_2_spanish.rds")
allScores_2_spanish_OLD <- readRDS("C:/Users/mahorton/Documents/COEnviroScreen_dataProcessing/data/shinyContent/allScores_2_spanish_OLD.rds")
table(allScores_2_spanish$`Comunidad de Justice40`, allScores_2_spanish$area)
table(allScores_2_spanish_OLD$`Comunidad de Justice40`, allScores_2_spanish_OLD$area)
