version = version,
processingLevel = processingLevel,
overwrite = overwrite)
View(senPop)
write_csv(x = senPop, f4)
# run functions
cat("ejscreen")
d1 <- ejscreen %>%
dplyr::select("GEOID","peopleOfColor","highSchool")
# run functions
cat("ejscreen")
d1 <- ejscreen %>%
dplyr::select("GEOID","peopleOfColor","highSchool")
cat("acsData")
d2 <- acsData %>%
dplyr::select("GEOID","percent_lowincome","percent_lingiso","percent_disability")
loadFunctions()
loadFunctions()
d3 <- getHousingBurden(processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
loadFunctions()
# Socioeconomic Factors ---------------------------------------------------
f5 <- paste0("data/output/enviroscreenScore/",processingLevel,"/socEco_",version,".csv")
if(file.exists(f5) & overwrite == overwrite){
socEco <- read_csv(f5)
}else{
socEco <- socioEconomicFactors(geometry = geometry,
version = version,
acsData = acsData,
ejscreen = ejscreen,
processingLevel = processingLevel,
overwrite = overwrite
)
write_csv(x = socEco, f5)
}
# run functions
cat("ejscreen")
d1 <- ejscreen %>%
dplyr::select("GEOID","peopleOfColor","highSchool")
cat("acsData")
d2 <- acsData %>%
dplyr::select("GEOID","percent_lowincome","percent_lingiso","percent_disability")
cat("housingBurden")
d3 <- getHousingBurden(processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
# there is not percent disability at census block group, so we need to pull in
# from the census tract level data
if(processingLevel == "censusBlockGroup"){
acs2 <- getACS(processingLevel = "censusTract", 2019, overwrite = FALSE)%>%
dplyr::select(GEOID2 = GEOID, percent_disability)
d2 <- d2 %>%
mutate(GEOID2 = substr(GEOID, start = 1, stop = 11))%>%
dplyr::left_join(acs2, by = c("GEOID2"))%>%
dplyr::select("GEOID","percent_lowincome","percent_lingiso","percent_disability" ="percent_disability.y")
}
#combine datasets
dataframes <- list(d1,d2,d3)
df <- joinDataFrames( dataframes)
class(d1)
class(d2)
class(d3)
d3 <- getHousingBurden(processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
d3
# create version dir
dir <- paste0("data/output/houseBurden/",version)
if(!dir.exists(dir)){
dir.create(dir)
}
# relates to the output file
file <- paste0(dir,"/",processingLevel,"_houseBurden.csv")
if(file.exists(file) & isFALSE(overwrite)){
geom <- read_csv(file)
}else{
# change the geometry character to match requirements in tidy census
if(processingLevel == "censusBlockGroup"){
processingLevel <- "block group"
}
if(processingLevel == "county"){
processingLevel <- "county"
}
if(processingLevel == "censusTract"){
processingLevel <- "tract"
}
df <- get_acs(geography = processingLevel,
variables = c("B25070_001", # Total Renters
"B25070_007", # 30 to 34.9%
"B25070_008", # 35 to 39.9%
"B25070_009", # 40 to 49.9%
"B25070_010", # 50% or more
"B25091_001", # total owner-occupied,
# "B25003_002", # confirmation of previous var - total owner occupied,
"B25091_008", # 30 to 34.9% - mortgaged
"B25091_009", # 35 to 39.9% - mortgaged
"B25091_010", # 40 to 49.9% - mortgaged
"B25091_011", # 50% or more - mortgaged
"B25091_019", # 30 to 34.9% - not mortgaged
"B25091_020", # 35 to 39.9% - not mortgaged
"B25091_021", # 40 to 49.9% - not mortgaged
"B25091_022" ), # 50% or more - not mortgaged
state = "08",
year = 2019)%>%
select(-moe) %>%
spread(key = variable, value = estimate)%>%
mutate(
HHUnits = B25070_001+B25091_001, # renter total + owner total
HH_Burdened = B25070_007+B25070_008+B25070_009+B25070_010+
B25091_008+B25091_009+B25091_010+B25091_011+
B25091_019+B25091_020+B25091_021+B25091_022, # >30% renters, mortgaged, nonmortgaged
HH_Burdened_Pct = HH_Burdened/HHUnits)%>%
dplyr::select(GEOID,HH_Burdened_Pct)
write_csv(df, file = file)
}
loadFunctions()
d3 <- getHousingBurden(processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
# there is not percent disability at census block group, so we need to pull in
# from the census tract level data
if(processingLevel == "censusBlockGroup"){
acs2 <- getACS(processingLevel = "censusTract", 2019, overwrite = FALSE)%>%
dplyr::select(GEOID2 = GEOID, percent_disability)
d2 <- d2 %>%
mutate(GEOID2 = substr(GEOID, start = 1, stop = 11))%>%
dplyr::left_join(acs2, by = c("GEOID2"))%>%
dplyr::select("GEOID","percent_lowincome","percent_lingiso","percent_disability" ="percent_disability.y")
}
#combine datasets
dataframes <- list(d1,d2,d3)
df <- joinDataFrames( dataframes)
# determine the average value across all features
df$socEco <- df %>%
select(contains("_pcntl"))%>%
apply(MARGIN = 1, FUN = gm_mean)
df
# Socioeconomic Factors ---------------------------------------------------
f5 <- paste0("data/output/enviroscreenScore/",processingLevel,"/socEco_",version,".csv")
if(file.exists(f5) & overwrite == overwrite){
socEco <- read_csv(f5)
}else{
socEco <- socioEconomicFactors(geometry = geometry,
version = version,
acsData = acsData,
ejscreen = ejscreen,
processingLevel = processingLevel,
overwrite = overwrite
)
write_csv(x = socEco, f5)
}
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = FALSE)
loadFunctions()
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = FALSE)
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = FALSE)
###
# general workflow structure
###
# download data processing code base
# download data from https://github.com/GeospatialCentroid/Colorado_EnviroScreen_Data
#
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# copy content from the data repo into the "data/input file folder
# you will be rewriting over the existing folder structure.
# pull geometry layers
getGeometryLayers()
#set version
version <- 1.1
# set census API key
# tidycensus::census_api_key(key = "your key")
# process data  -----------------------------------------------------------
## run single or multiple geometries
geoms <- c("county","censusTract","censusBlockGroup")
processingLevel=geoms[1]
envExposures <- enviromentalExposures(geometry = geometry,
version = version,
ejscreen = ejscreen,
processingLevel = processingLevel,
overwrite = overwrite)
envExposures <- read_csv(f1)
# Exposures ---------------------------------------------------------------
f1 <- paste0("data/output/enviroscreenScore/",processingLevel,"/enviromentalExposures_",version,".csv")
envExposures <- read_csv(f1)
f1
dim(envExposures)
View(envExposures)
d2 <- getSurfaceWater(filePath = "data/input/surfaceWater/Streams303dLayerFinal.shp",
processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
file <- paste0("data/output/enviroscreenScore/", processingLevel,"/enviromentalEffects_",version,".csv")
# run functions
cat("EJscreen")
d1 <- ejscreen %>%
dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
d2 <- getSurfaceWater(filePath = "data/input/surfaceWater/Streams303dLayerFinal.shp",
processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
overwrite <- FALSE
d1 <- ejscreen %>%
dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
cat("Surface Water")
# call in spatial object at give extent
geometry <- setSpatialData(processingLevel = processingLevel)
### EJScreen and ACS data contributes to multiple components run it here then split out
ejscreen <- ej_screen(filePath = "data/input/EJScreen/EJSCREEN_2021_StatePctile.csv",
geometry = geometry,
processingLevel = processingLevel,
version = version,
overwrite = overwrite)
### add condition to test for the existence of a specific file based on geom
acsData <- acs(processingLevel = processingLevel,
version = version,
overwrite = overwrite)
# run functions
cat("EJscreen")
d1 <- ejscreen %>%
dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
cat("Surface Water")
d2 <- getSurfaceWater(filePath = "data/input/surfaceWater/Streams303dLayerFinal.shp",
processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
cat("Mining")
d3 <- getmines(geometry,
processingLevel,
version = version,
overwrite = overwrite)
cat("Oil and Gas")
d4 <- getProxyOilGas(geometry = geometry,
processingLevel = processingLevel,
version = version,
overwrite = overwrite)
# combine datasets
dataframes <- list(d1,d2,d3,d4)
df <- joinDataFrames(dataframes)
View(df)
# run functions
cat("EJscreen")
d1 <- ejscreen %>%
dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
cat("Surface Water")
d2 <- getSurfaceWater(filePath = "data/input/surfaceWater/Streams303dLayerFinal.shp",
processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
d1
d2
d2 <- getSurfaceWater(filePath = "data/input/surfaceWater/Streams303dLayerFinal.shp",
processingLevel = processingLevel,
geometry = geometry,
version = version,
overwrite = overwrite)
d2
d1 <- ejscreen %>%
dplyr::select("GEOID","waterDischarge","nplProx","rmpProx","tsdfProx")
###
# general workflow structure
###
# download data processing code base
# download data from https://github.com/GeospatialCentroid/Colorado_EnviroScreen_Data
#
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# copy content from the data repo into the "data/input file folder
# you will be rewriting over the existing folder structure.
# pull geometry layers
getGeometryLayers()
#set version
version <- 1.1
# set census API key
# tidycensus::census_api_key(key = "your key")
# process data  -----------------------------------------------------------
## run single or multiple geometries
geoms <- c("county","censusTract","censusBlockGroup")
(processingLevel=geoms[1]
processingLevel=geoms[1]
processingLevel=geoms[1]
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = TRUE)
###
# general workflow structure
###
# download data processing code base
# download data from https://github.com/GeospatialCentroid/Colorado_EnviroScreen_Data
#
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# copy content from the data repo into the "data/input file folder
# you will be rewriting over the existing folder structure.
# pull geometry layers
getGeometryLayers()
#set version
version <- 1.1
# set census API key
# tidycensus::census_api_key(key = "your key")
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = FALSE)
# process data  -----------------------------------------------------------
## run single or multiple geometries
geoms <- c("county","censusTract","censusBlockGroup")
# running single component
processData(processingLevel=geoms[1],
version = version,
overwrite = FALSE)
# grab total population from ACS data
acsData <- list.files(path = paste0("data/output/acs/",version), pattern = ".csv", full.names = TRUE)%>%
purrr::map(read_csv)%>%
purrr::reduce(rbind)%>%
dplyr::select("GEOID","Total Population"= "total_Population")
acsData
# read in spatial data
county <- sf::st_read("data/spatialLayers/county/coloradoCounties.geojson")%>%
dplyr::mutate(area = "County",
areaSpanish = "Condado",
name = paste0(NAME, " County"))%>%
dplyr::select(GEOID, "cNAME" = NAME,name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# read in spatial data
county <- sf::st_read("data/spatialLayers/county/coloradoCounties.geojson")%>%
dplyr::mutate(area = "County",
areaSpanish = "Condado",
name = paste0(NAME, " County"))%>%
dplyr::select(GEOID, "cNAME" = NAME,name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# read in spatial data
county <- sf::st_read("data/output/spatialLayers/county/coloradoCounties.geojson")%>%
dplyr::mutate(area = "County",
areaSpanish = "Condado",
name = paste0(NAME, " County"))%>%
dplyr::select(GEOID, "cNAME" = NAME,name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# census tract
censusTract <- sf::st_read("data/output/spatialLayers/censusTract/coloradoCensusTracts.geojson")%>%
dplyr::mutate(area = "Census Tract",
areaSpanish = "Sector censal",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0(cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# census tract
censusTract <- sf::st_read("data/output/spatialLayers/censusTracta/coloradoCensusTracts.geojson")%>%
dplyr::mutate(area = "Census Tract",
areaSpanish = "Sector censal",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0(cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# census tract
censusTract <- sf::st_read("data/output/spatialLayers/censusTracts/coloradoCensusTracts.geojson")%>%
dplyr::mutate(area = "Census Tract",
areaSpanish = "Sector censal",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0(cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# read in spatial data
county <- sf::st_read("data/output/spatialLayers/county/coloradoCounties.geojson")%>%
dplyr::mutate(area = "County",
areaSpanish = "Condado",
name = paste0(NAME, " County"))%>%
dplyr::select(GEOID, "cNAME" = NAME,name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# grap county name to attached to each lower geometry
countyName <- county %>% st_drop_geometry() %>% dplyr::select(GEOID, cNAME)
county <- dplyr::select(county, -"cNAME")
county
# census tract
censusTract <- sf::st_read("data/output/spatialLayers/censusTracts/coloradoCensusTracts.geojson")%>%
dplyr::mutate(area = "Census Tract",
areaSpanish = "Sector censal",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0(cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# census block group
censusBlockGroup <- sf::st_read("data/output/spatialLayers/censusBlockGroups/coloradoCensusBlockGroups.geojson")%>%
dplyr::mutate(area = "Census Block Group",
areaSpanish = "Grupo de bloques censales",
geoid2 =stringr::str_sub(GEOID,start = 1, end = 5))%>%
dplyr::left_join( y = countyName, by = c("geoid2" = "GEOID"))%>%
dplyr::mutate(name = paste0( cNAME, " County"))%>%
dplyr::select(GEOID, name, area,areaSpanish)%>%
st_transform(crs = st_crs(4326))%>%
rmapshaper::ms_simplify()
# read in enviroscreen score files
c_data <- read_csv(paste0("data/output/envScreenScores/county_",version,".csv"))%>%
dplyr::left_join(county, by = "GEOID")
# read in enviroscreen score files
c_data <- read_csv(paste0("data/output/enviroscreenScore/county_",version,".csv"))%>%
dplyr::left_join(county, by = "GEOID")
c_data
# add label for Coal, oil/gas, rural, justice 40, and di community -------------------------------------
coal <- readRDS("data/shinyContent/coalCommunities.rds")%>%
dplyr::select("GEOID","Coal Community" = "coal")%>%
st_drop_geometry()
# add label for Coal, oil/gas, rural, justice 40, and di community -------------------------------------
coal <- readRDS("data/shinyContent/coalVis.rds")%>%
dplyr::select("GEOID","Coal Community" = "coal")%>%
st_drop_geometry()
coal
loadFunctions()
# rural communities
getRural()
# coal communities
getCoal()
# oil and gas communities
getOilGas()
# add label for Coal, oil/gas, rural, justice 40, and di community -------------------------------------
coal <- readRDS("data/shinyContent/coalCommunity.rds")%>%
dplyr::select("GEOID","Coal Community" = "coal")%>%
st_drop_geometry()
og <- readRDS("data/shinyContent/oilgasCommunity.rds")%>%
dplyr::select("GEOID","Oil and Gas Community" = "oilGas")%>%
st_drop_geometry()
rural <- readRDS("data/shinyContent/ruralCommunity.rds")%>%
dplyr::select("GEOID","Rural" = "rural")%>%
st_drop_geometry()
justice40 <- readRDS("data/shinyContent/justice40.rds") %>%
dplyr::select("GEOID","Justice40" = "Identified.as.disadvantaged")%>%
st_drop_geometry()
diCommunity <- readRDS("data/shinyContent/diCommunities.rds")%>%
dplyr::select("GEOID","Disproportionately Impacted Community" = "DI_community")%>%
dplyr::mutate("Disproportionately Impacted Community" = case_when(
`Disproportionately Impacted Community` == 1 ~ TRUE
)
)%>%
st_drop_geometry()
###
# general workflow structure
###
# download data processing code base
# download data from https://github.com/GeospatialCentroid/Colorado_EnviroScreen_Data
#
# setup -------------------------------------------------------------------
# load required libraries
# install.packages("pacman")
pacman::p_load(tigris,tidycensus,dplyr,sf,stringr,tictoc,vroom,terra,arcpullr,purrr,tidyr,rmapshaper,readr,lubridate)
# source loadFunctions then load functions
source("R/utils/loadFunctions.R")
loadFunctions()
# create the file folder structure
createFolderStructure()
# copy content from the data repo into the "data/input file folder
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('IRkernel'
)
install.packages("IRkernel")
IRkernel::installspec()
